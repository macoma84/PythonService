Metadata-Version: 2.4
Name: PythonService
Version: 0.1.0
Summary: A FastAPI service packaged as a .deb file.
Home-page: https://github.com/macoma84/PythonService
Author: Mariano
Author-email: macoma84@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Framework :: FastAPI
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn[standard]>=0.20.0
Requires-Dist: python-multipart>=0.0.6
Requires-Dist: matplotlib>=3.0.0
Requires-Dist: numpy>=1.18.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Dynamic Microservice Runner

Este proyecto implementa un servidor FastAPI que puede cargar dinÃ¡micamente mÃ³dulos de microservicios en tiempo de ejecuciÃ³n. Proporciona una interfaz web simple para cargar archivos Python que contienen instancias de `APIRouter` de FastAPI.

## CaracterÃ­sticas

*   **Carga DinÃ¡mica de MÃ³dulos:** Sube archivos `.py` que contienen `APIRouter` a travÃ©s de la interfaz web. El servidor los cargarÃ¡ automÃ¡ticamente.
*   **Interfaz Web:** Una pÃ¡gina HTML simple (`/`) para cargar nuevos mÃ³dulos de servicio.
*   **DocumentaciÃ³n AutomÃ¡tica:** Accede a `/docs` para ver la documentaciÃ³n OpenAPI (Swagger UI) generada automÃ¡ticamente para todos los endpoints cargados.
*   **Recarga AutomÃ¡tica:** Los cambios en los archivos de mÃ³dulo existentes o la adiciÃ³n de nuevos mÃ³dulos activan una recarga del servidor (cuando se ejecuta con `uvicorn --reload`).
*   **Ejemplo Incluido:** Un servicio de ejemplo (`plot_service.py`) que genera un grÃ¡fico de onda sinusoidal accesible en `/plot_service/plot`.
*   **Soporte Docker:** Incluye `Dockerfile` y `docker-compose.yml` para facilitar la contenedorizaciÃ³n.

## ConfiguraciÃ³n y EjecuciÃ³n

### Localmente

1.  **Clonar el repositorio (si aplica):**
    ```bash
    git clone <url-repositorio>
    cd PythonService
    ```
2.  **Crear un entorno virtual (recomendado):**
    ```bash
    python -m venv venv
    # Windows
    .\venv\Scripts\activate
    # macOS/Linux
    source venv/bin/activate
    ```
3.  **Instalar dependencias:**
    ```bash
    pip install -r requirements.txt
    ```
4.  **Ejecutar el servidor:**
    ```bash
    uvicorn main:app --reload --host 0.0.0.0 --port 8000
    ```
    El servidor estarÃ¡ disponible en `http://localhost:8000`.

### Con Docker

1.  **Construir la imagen:**
    ```bash
    docker-compose build
    ```
2.  **Iniciar el contenedor:**
    ```bash
    docker-compose up
    ```
    El servidor estarÃ¡ disponible en `http://localhost:8000`.

## Uso

1.  **Accede a la Interfaz Web:** Abre `http://localhost:8000` en tu navegador.
2.  **Sube un Servicio:**
    *   Haz clic en "Choose File" y selecciona un archivo Python (`.py`) que contenga una variable llamada `router` que sea una instancia de `fastapi.APIRouter`.
    *   Haz clic en "Upload Service".
3.  **Accede a los Endpoints:**
    *   Si subiste un archivo llamado `mi_servicio.py` con un endpoint `/datos`, estarÃ¡ accesible en `http://localhost:8000/mi_servicio/datos`.
    *   El servicio de ejemplo `plot_service.py` estÃ¡ en `http://localhost:8000/plot_service/plot`.
4.  **Ver DocumentaciÃ³n:** Navega a `http://localhost:8000/docs` para ver todos los endpoints disponibles.

## Bibliotecas Soportadas

El entorno de ejecuciÃ³n incluye las siguientes bibliotecas principales (ver `requirements.txt` para versiones exactas):

*   fastapi
*   uvicorn
*   python-multipart
*   matplotlib
*   numpy

## LiberaciÃ³n de Nuevas Versiones

Este proyecto utiliza GitHub Actions para construir y publicar automÃ¡ticamente un paquete `.deb` cada vez que se crea una nueva etiqueta de versiÃ³n en Git.

Para liberar una nueva versiÃ³n:

1.  **AsegÃºrate de que tu rama principal (`main` o `master`) estÃ© actualizada y que todos los cambios estÃ©n confirmados.**
2.  **Crea una etiqueta de Git con el formato `vX.Y.Z` (por ejemplo, `v1.0.1`):**
    ```bash
    git tag v1.0.1
    ```
3.  **Empuja la etiqueta al repositorio remoto (GitHub):**
    ```bash
    git push origin v1.0.1
    ```

Esto activarÃ¡ el flujo de trabajo definido en `.github/workflows/build-deb.yml`. Una vez que el flujo de trabajo se complete con Ã©xito, encontrarÃ¡s el archivo `.deb` adjunto a la nueva "Release" en la secciÃ³n de "Releases" de tu repositorio en GitHub.

## EjecuciÃ³n
py -m pip install -r requirements.txt
py -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
